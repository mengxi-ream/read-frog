name: Release

on:
  push:
    branches:
      - main

concurrency: ${{ github.workflow }}-${{ github.ref }}

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          cache: pnpm

      - name: Install Dependencies
        run: pnpm install
        shell: bash

      - name: Create Release Pull Request or Tag
        id: changesets
        uses: changesets/action@v1
        with:
          commit: 'chore(release): version packages'
          title: 'chore(release): version packages'
          publish: pnpm run release
          createGithubReleases: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Send Discord Notification
        if: steps.changesets.outputs.published == 'true'
        run: |
          echo "Sending Discord notification for published packages..."

          # Get published packages from changesets output
          PUBLISHED_PACKAGES='${{ steps.changesets.outputs.publishedPackages }}'

          if [ -z "$PUBLISHED_PACKAGES" ] || [ "$PUBLISHED_PACKAGES" = "[]" ]; then
            echo "No packages were published"
            exit 0
          fi

          echo "Published packages: $PUBLISHED_PACKAGES"

          # Build notification content
          NOTIFICATION_CONTENT=""
          RELEASE_URLS=""

          # Get package emoji based on name
          get_package_emoji() {
            case "$1" in
              *"extension"*) echo "📱" ;;
              *"website"*) echo "🌐" ;;
              *"cli"*) echo "⚡" ;;
              *"api"*) echo "🔌" ;;
              *"core"*) echo "⚙️" ;;
              *"sdk"*) echo "🛠️" ;;
              *) echo "📦" ;;
            esac
          }

          # Parse published packages JSON
          echo "$PUBLISHED_PACKAGES" | jq -c '.[]' | while read -r package_info; do
            if [ -n "$package_info" ]; then
              PACKAGE_NAME=$(echo "$package_info" | jq -r '.name')
              PACKAGE_VERSION=$(echo "$package_info" | jq -r '.version')

              # Generate tag name based on changesets convention
              PACKAGE_TAG="$PACKAGE_NAME@$PACKAGE_VERSION"

              EMOJI=$(get_package_emoji "$PACKAGE_NAME")
              # Extract display name (e.g., @read-frog/extension -> Extension)
              PACKAGE_DISPLAY_NAME=$(echo "$PACKAGE_NAME" | sed 's/.*\///g' | sed 's/\b\w/\U&/g')

              NOTIFICATION_CONTENT="$NOTIFICATION_CONTENT\n$EMOJI **$PACKAGE_DISPLAY_NAME** \`$PACKAGE_VERSION\`"
              RELEASE_URLS="$RELEASE_URLS\n[$PACKAGE_DISPLAY_NAME Release](https://github.com/${{ github.repository }}/releases/tag/$PACKAGE_TAG)"
            fi
          done

          # Create Discord payload
          cat << EOF > /tmp/discord_payload.json
          {
            "embeds": [{
              "title": "🎉 New Release Published!",
              "description": "**${{ github.repository }}** has published new packages!",
              "url": "https://github.com/${{ github.repository }}/releases",
              "color": 48253,
              "fields": [
                {
                  "name": "Published Packages",
                  "value": "$NOTIFICATION_CONTENT",
                  "inline": false
                },
                {
                  "name": "Release Links",
                  "value": "$RELEASE_URLS",
                  "inline": false
                },
                {
                  "name": "Repository",
                  "value": "[${{ github.repository }}](https://github.com/${{ github.repository }})",
                  "inline": true
                }
              ],
              "footer": {
                "text": "GitHub Actions",
                "icon_url": "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png"
              },
              "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%S.000Z)"
            }]
          }
          EOF

          echo "Discord payload:"
          cat /tmp/discord_payload.json

          # Send to Discord
          curl -H "Content-Type: application/json" \
               -X POST \
               -d @/tmp/discord_payload.json \
               ${{ secrets.DISCORD_WEBHOOK_URL }}
